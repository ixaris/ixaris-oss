syntax = "proto3";

package com.ixaris.samples.microservices.edge.api;

import "scsl.proto";
import "valid.proto";
import "description.proto";
import "commons_microservices_defaults_context.proto";

option optimize_for = SPEED;
option (scsl.location) = "samples_microservices_edge_api.scsl";

message EdgeItemError {
    enum Code {
        NO_ERROR = 0;
        EXAMPLE_ERROR = 1;
    }

    Code code = 1;
}

message EdgeItemsFilter {
    string name = 1;
}

message EdgeItem {
    int64 id = 1;
    string name = 2;
    int64 extra1 = 3;
    repeated int64 extra2 = 4;
    EdgeLoginRequest extra3 = 5;
    repeated EdgeLoginRequest extra4 = 6;
    map<int64, EdgeLoginRequest> extra5 = 7;
    map<string, EdgeLoginRequest> extra6 = 8 [(valid.enumeration) = "EdgeLoginError.Code"];

    ExampleMessage extra9 = 9;
    StringTestMessage extra10 = 10;
    BooleanTestMessage extra11 = 11;
    NumberTestMessage extra12 = 12;
    MessageTestMessage extra13 = 13;
    EnumTestMessage extra14 = 14;
    ListTestMessage extra15 = 15;
    MapTestMessage extra16 = 16;
    AtLeastNTestMessage extra17 = 17;
    AtMostNTestMessage extra18 = 18;
    ExactlyNTestMessage extra19 = 19;
    AllOrNoneTestMessage extra20 = 20;
    TestMessage extra21 = 21;
    Nested extra22 = 22;
    NullableBoolean extra23 = 23;

    option (valid.message) = "at_least(1,extra1,extra2)";
}

message EdgeItems {
    repeated EdgeItem edge_items = 1;
}

message EdgeItemEvent {
    EdgeItem edge_item = 1;
}

message EdgeLoginRequest {
    string username = 1;
    string password = 2;
}

message EdgeLoginDetails {
    string token = 1;
}

message EdgeLoginError {
    enum Code {
        FAILED_LOGIN = 0;
        INVALID_USERNAME = 1;
        EXPIRED_PASSWORD = 2;
    }

    Code code = 1;
}

message ExampleMessage {
    enum ExampleEnum {
        ZERO = 0;
        ONE = 1;
        TWO = 2;
    }

    bool v_boolean = 1;
    string v_string = 2;
    int32 v_integer = 3;
    int64 v_long = 4;
    ExampleEnum v_enum = 5;
    Nested nested = 6;
}

message StringTestMessage {
    string s = 1;
    string s_required = 2 [(valid.field) = "required"];
    string s_has_text = 3 [(valid.field) = "has_text"];
    string s_size = 4 [(valid.field) = "size(5, 8)"];
    string s_in = 5 [(valid.field) = "in('AAA','BBB','CCC')"];
    string s_not_in = 7 [(valid.field) = "not_in('AAA','BBB','CCC')"];
    repeated string sl = 8 [(valid.values) = "has_text size(5, 8)"];
    map<string, string> s_in_enum = 6 [(valid.enumeration) = "Nested.E", (valid.values) = "required has_text"];
}

message BooleanTestMessage {
    bool b = 1;
    bool b_required = 2 [(valid.field) = "required"];
}

message NumberTestMessage {
    int32 n = 1;
    double n_required = 2 [(valid.field) = "required"];
    int32 n_ge = 3 [(valid.field) = "range(3,_)"];
    int32 n_gt = 4 [(valid.field) = "exc_range(3,_)"];
    int32 n_le = 5 [(valid.field) = "range(_,10)"];
    int32 n_lt = 6 [(valid.field) = "exc_range(_,10)"];
    int32 n_range = 7 [(valid.field) = "range(5,10.6)"];
    int64 n_ge_ref = 8 [(valid.field) = "range(n_required,_)"];
    int64 n_gt_ref = 9 [(valid.field) = "exc_range(n_required,_)"];
    int64 n_le_ref = 10 [(valid.field) = "range(_,n_required)"];
    int64 n_lt_ref = 11 [(valid.field) = "exc_range(_,n_required)"];
    int64 n_range_ref = 12 [(valid.field) = "range(n,n_required)"];
    int32 n_in = 13 [(valid.field) = "in(5,10.0,15.0,20)"];
    repeated int32 nl = 14 [(valid.values) = "range(5,10.6)"];
}

message MessageTestMessage {
    Nested m = 1;
    Nested m_required = 2 [(valid.field) = "required"];
    repeated Nested ml = 3 [(valid.values) = "required"];
    map<string, Nested> mm = 4;
}

message EnumTestMessage {
    Nested.E e = 1;
    Nested.E e_required = 2 [(valid.field) = "required"];
    Nested.E e_in = 5 [(valid.field) = "in(A,D)", (description.field) = "test"];
    Nested.E e_not_in = 7 [(valid.field) = "not_in(A,D)"];
}

message ListTestMessage {
    repeated string l_required = 1 [(valid.field) = "required"];
    repeated string l_size = 2 [(valid.field) = "size(2, 4)"];
}

message MapTestMessage {
    map<string, string> sm_required = 1 [(valid.field) = "required"];
    map<string, string> sm_size = 2 [(valid.field) = "size(2, 4)"];
    map<int32, string> im_required = 3 [(valid.field) = "required"];
    map<int32, string> im_size = 4 [(valid.field) = "size(2, 4)"];
}

message AtLeastNTestMessage {
    string a = 1;
    string b = 2;
    string c = 3;
    string d = 4;
    string e = 5;
    string f = 6;

    option (valid.message) = "at_least(1,a,b)";
    option (valid.message) = "at_least(3,c,d,e,f)";
}

message AtMostNTestMessage {
    string a = 1;
    string b = 2;
    string c = 3;
    string d = 4;
    string e = 5;
    string f = 6;

    option (valid.message) = "at_most(1,a,b)";
    option (valid.message) = "at_most(3,c,d,e,f)";
}

message ExactlyNTestMessage {
    string a = 1;
    string b = 2;
    string c = 3;
    string d = 4;
    string e = 5;
    string f = 6;

    option (valid.message) = "exactly(1,a,b)";
    option (valid.message) = "exactly(3,c,d,e,f)";
}

message AllOrNoneTestMessage {
    string a = 1;
    string b = 2;
    string c = 3;

    option (valid.message) = "all_or_none(a,b,c)";
}

message TestMessage {

    string str = 1 [(valid.field) = "required size(_,10)"];
    string str2 = 2 [(valid.field) = "regex(a\\(b\\))"];
    repeated string str_list = 3 [(valid.field) = "size(2, _)", (valid.values) = "required size(_,10)"];
    map<string, string> str_map = 4 [(valid.field) = "size(2,5)", (valid.enumeration) = "Nested.E", (valid.values) = "required size(_,10)"];

    int32 int1 = 5 [(valid.field) = "range(0,10)"];
    int32 int2 = 6;
    repeated int32 int_list = 7 [(valid.field) = "size(2,_)", (valid.values) = "required range(_,10)"];
    map<string, int32> int_map = 8 [(valid.field) = "size(2,5)", (valid.keys) = "in('a','b')", (valid.values) = "required range(_,10)"];

    Nested nested = 9 [(valid.field) = "required"];
    repeated Nested nested_list = 10 [(valid.field) = "size(1,3)"];

    bool b = 11;

    SomeOtherMessage someOtherMessage = 12 [(valid.field) = "required"];

    option (valid.message) = "at_least(1,str,str2)";
    option (valid.message) = "match(str,str2)";

    message SomeOtherMessage {
        string str = 1 [(valid.field) = "required size(1,10)"];
    }
}

message Nested {
    string a = 1 [(valid.field) = "required"];
    string b = 2;
    int32 c = 3;
    int64 d = 4;
    Nested n = 5;
    E e = 6;

    enum E {
        DEFAULT = 0;
        A = 1;
        B = 2;
        C = 3;
        D = 4;
    }
}

enum NullableBoolean {
    option (description.enumeration) = "A boolean whose default value is 'unset' instead of false/true. Allows distinction between unset and true/false";
    NULL = 0;
    TRUE = 1;
    FALSE = 2;
}

