// Generated by the ixaris microservices protocol buffer compiler.  DO NOT EDIT!
// source: {{ source }}

package {{ javaPackage }}.resource;

import javax.annotation.Generated;

import com.ixaris.commons.async.lib.Async;
import com.ixaris.commons.microservices.lib.common.Nil;
import com.ixaris.commons.microservices.lib.common.ServiceOperationHeader;
import com.ixaris.commons.microservices.lib.common.ServiceRootResource;
import com.ixaris.commons.microservices.lib.common.annotations.ServicePath;
import com.ixaris.commons.microservices.lib.common.annotations.ServiceSecurity;
import com.ixaris.commons.microservices.lib.common.annotations.ServiceTags;
import com.ixaris.commons.microservices.lib.common.exception.ClientConflictException;

{% if hasDescription %}/**
 * {{ description }}
 */
{% endif %}@Generated("com.ixaris.commons.microservices.scslcodegen"){% if hasSecurity %}
@ServiceSecurity("{{security}}"){% endif %}{% if hasTags %}
@ServiceTags({"{{ tags|join("\", \"") }}"}){% endif %}
public interface {{ capitalName }}Resource extends ServiceRootResource<{{ contextClassname }}> {

    String NAME = "{{ name }}";
{% for constant in constants %}{{ constant }}
{% endfor %}
{% for method in methods %}{{ method }}
{% endfor %}{% for node in nodes %}{{ node }}
{% endfor %}{% for error in errors %}
    final class {{ error.key }}Exception extends ClientConflictException {

        public {{ error.key }}Exception(final {{ error.type }} conflict) {
            super(conflict);
        }

        public {{ error.key }}Exception(final {{ error.type }} conflict, final Throwable cause) {
            super(conflict, cause);
        }

        @Override
        public {{ error.type }} getConflict() {
            return ({{ error.type }}) super.getConflict();
        }

    }
{% endfor %}
}
